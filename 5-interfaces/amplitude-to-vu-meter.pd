#N canvas 115 25 717 847 12;
#X obj 407 47 vu 30 200 master_snd empty -1 -10 0 12 #404040 #000000 1 0;
#X obj 111 129 osc~ 440;
#X obj 111 153 *~;
#X obj 314 39 vsl 19 162 0 2 0 0 empty empty empty 0 -9 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 111 177 env~;
#X obj 111 201 - 100;
#X floatatom 132 225 5 0 0 0 measured\ dBFS - master_snd 0;
#X floatatom 314 210 5 0 0 0 linear\ amplitude - - 0;
#X floatatom 130 39 5 0 0 0 dB\ volume\ input - - 0;
#X obj 130 62 dbtorms;
#X floatatom 130 86 5 0 0 0 - - - 0;
#X text 41 276 There's two ways of representing amplitude: linear and dB which is a logarithmic scale. In Pd the dbtorms and rmstodb objects convert between dB and linear "RMS" amplitude. Our normal mutiplication amplitude is linear \, but this isn't how we "hear" amplitude. Doubling the amplitude with *~ results in a change of +6 dB. This example starts with dB volume input with 100 translating to a linear amplitude of 1 We change this to linear amplitude and then multiply this by a sine tone. The env~ object measures the amplitude and we subtract 100 to get a value in dBFS (dB relative to full scale) which is a standard where "0" is the maximum digital amplitude. We can send this signal to the VU meter object which receives signals in this scale. You can see that at linear amplitude 1 \, the sine tone measures at -3dBFS (which is normal). At 2 it measure +3dBFS so 6dB higher! Also normal.;
#X connect 1 0 2 0;
#X connect 2 0 4 0;
#X connect 3 0 2 1;
#X connect 3 0 7 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 3 0;
